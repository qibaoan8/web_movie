#!/usr/bin/env python# encoding: utf-8## Copyright (c) 2018 alibaba-inc. All Rights Reserved#"""File: convert_video.pyDate: 2019-01-20 00:11Author: wang.gaofei@alibaba-inc.com"""import os, random, timefrom find_file import find_filefrom log_config import init_logfrom config import ffmpeg_exe, ffprobe_exe, IS_WINDOWSfile_path = os.path.abspath(os.path.dirname(__file__))log = init_log("convert", "../logs/")class Video():    def __init__(self):        pass    def get_tmp_file(self):        if IS_WINDOWS:            return "d:\\cmd_out.{}".format(random.randint(10000,99999))        else:            return "/Users/wang.gaofei/tmp/cmd_out.{}".format(random.randint(10000,99999))    def get_video_code(self, filename):        tmp_file = self.get_tmp_file()        cmd = '''{0} "{1}" > {2} 2>&1 '''.format(ffprobe_exe, filename, tmp_file)        os.system(cmd)        # print cmd        with open(tmp_file,'r') as f:            file_body = f.read()        os.remove(tmp_file)        for line in file_body.split('\n'):            # print line            if "Video:" in line:                return line.split(' ')[7]        return ""    def convert_video_code(self,o_mp4, dst_code='libx264'):        filename = o_mp4['filename']        queuefile = o_mp4['queuefile']        if filename.endswith('.mp4'):            filename_src = filename            filename_dst = filename[:-4] + "_new.mp4"        else:            filename_src = filename            filename_all = filename.split('.')            filename_dst = '.'.join(filename_all[:-1]) + ".mp4"        log.info('convert src file {0}, dst file {1}'.format(filename_src,filename_dst))        tmp_file = self.get_tmp_file()        cmd = '''{0} -y -i "{1}" -c:v {2} -strict -2 "{3}" > {4} 2>&1 '''.format(                        ffmpeg_exe,filename_src,dst_code,filename_dst,tmp_file)        log.info('convert cmd is: {}'.format(cmd))        os.system(cmd)        with open(tmp_file, 'r') as f:            file_body = f.read()            log.info('convert output is: \n {}'.format(file_body))        os.remove(tmp_file)        os.remove(filename_src)        os.remove(queuefile)        log.info('convert finish, delete file {}'.format(filename_src))        return ""def find_convert(path, queue):    v = Video()    # path = 'J:\ddd\web_scan'    file_list = []    file_list.extend(find_file(path,'.mp4'))    file_list.extend(find_file(path, '.mpg'))    file_list.extend(find_file(path, '.wmv'))    file_list.extend(find_file(path, '.mkv'))    for file in file_list:        filename = os.path.join(path, file)        if IS_WINDOWS:            filename = filename.decode('utf-8').encode('gbk')        else:            filename = filename.decode('utf-8')        video_code = v.get_video_code(filename)        if 'mpeg' in video_code or 'wmv' in video_code or 'mkv' in video_code:            log.info('convert file add to queue {} ,this code is {}'.format(filename,video_code))            # 加入转换队列。            queue.add_task(filename)            # v.convert_video_code(filename)    returndef get_long_time_stamp():    time_stamp = str(int(time.time() * 1000)) + "_" + str(random.randint(10000,99999))    return time_stampif __name__ == '__main__':    pass